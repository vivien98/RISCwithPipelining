-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.


-- Generated by Quartus Prime Version 17.1 (Build Build 590 10/25/2017)
-- Created on Sat Nov 24 19:36:59 2018

COMPONENT stage3
	PORT
	(
		clk		:	 IN STD_LOGIC;
		rst		:	 IN STD_LOGIC;
		valid_in		:	 IN STD_LOGIC;
		reg_addr2_ctl		:	 IN STD_LOGIC;
		input_alu2_ctl_4		:	 IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		output_ctrl_4		:	 IN STD_LOGIC;
		output_ctrl_5		:	 IN STD_LOGIC;
		reg_inp_data_ctl_6		:	 IN STD_LOGIC;
		mem_rd_5		:	 IN STD_LOGIC;
		reg_wr_6		:	 IN STD_LOGIC;
		pc_old_i		:	 IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		carry_yes_i		:	 IN STD_LOGIC;
		zero_yes_i		:	 IN STD_LOGIC;
		imm6_i		:	 IN STD_LOGIC_VECTOR(5 DOWNTO 0);
		imm9_i		:	 IN STD_LOGIC_VECTOR(8 DOWNTO 0);
		reg_a_addr_i		:	 IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		reg_b_addr		:	 IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		reg_c_addr		:	 IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		alu_op_i		:	 IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		t1		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		t2		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		alu_op_o		:	 OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		pc_old_o		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		imm6_o		:	 OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
		imm9_o		:	 OUT STD_LOGIC_VECTOR(8 DOWNTO 0);
		reg_b_val		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		reg_a_addr_o		:	 OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
		carry_yes_o		:	 OUT STD_LOGIC;
		zero_yes_o		:	 OUT STD_LOGIC;
		xor_comp		:	 OUT STD_LOGIC;
		input_alu2_ctl_4_o		:	 OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		output_ctrl_4_o		:	 OUT STD_LOGIC;
		output_ctrl_5_o		:	 OUT STD_LOGIC;
		reg_inp_data_ctl_6_o		:	 OUT STD_LOGIC;
		mem_rd_5_o		:	 OUT STD_LOGIC;
		reg_wr_6_o		:	 OUT STD_LOGIC;
		valid_out		:	 OUT STD_LOGIC
	);
END COMPONENT;