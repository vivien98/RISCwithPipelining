// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 17.1 (Build Build 590 10/25/2017)
// Created on Sat Nov 24 19:41:34 2018

stage3 stage3_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.rst(rst_sig) ,	// input  rst_sig
	.valid_in(valid_in_sig) ,	// input  valid_in_sig
	.reg_addr2_ctl(reg_addr2_ctl_sig) ,	// input  reg_addr2_ctl_sig
	.input_alu2_ctl_4(input_alu2_ctl_4_sig) ,	// input [1:0] input_alu2_ctl_4_sig
	.output_ctrl_4(output_ctrl_4_sig) ,	// input  output_ctrl_4_sig
	.output_ctrl_5(output_ctrl_5_sig) ,	// input  output_ctrl_5_sig
	.reg_inp_data_ctl_6(reg_inp_data_ctl_6_sig) ,	// input  reg_inp_data_ctl_6_sig
	.mem_rd_5(mem_rd_5_sig) ,	// input  mem_rd_5_sig
	.reg_wr_6(reg_wr_6_sig) ,	// input  reg_wr_6_sig
	.pc_old_i(pc_old_i_sig) ,	// input [2:0] pc_old_i_sig
	.carry_yes_i(carry_yes_i_sig) ,	// input  carry_yes_i_sig
	.zero_yes_i(zero_yes_i_sig) ,	// input  zero_yes_i_sig
	.imm6_i(imm6_i_sig) ,	// input [5:0] imm6_i_sig
	.imm9_i(imm9_i_sig) ,	// input [8:0] imm9_i_sig
	.reg_a_addr_i(reg_a_addr_i_sig) ,	// input [2:0] reg_a_addr_i_sig
	.reg_b_addr(reg_b_addr_sig) ,	// input [2:0] reg_b_addr_sig
	.reg_c_addr(reg_c_addr_sig) ,	// input [2:0] reg_c_addr_sig
	.alu_op_i(alu_op_i_sig) ,	// input [1:0] alu_op_i_sig
	.t1(t1_sig) ,	// output [15:0] t1_sig
	.t2(t2_sig) ,	// output [15:0] t2_sig
	.alu_op_o(alu_op_o_sig) ,	// output [1:0] alu_op_o_sig
	.pc_old_o(pc_old_o_sig) ,	// output [15:0] pc_old_o_sig
	.imm6_o(imm6_o_sig) ,	// output [5:0] imm6_o_sig
	.imm9_o(imm9_o_sig) ,	// output [8:0] imm9_o_sig
	.reg_b_val(reg_b_val_sig) ,	// output [15:0] reg_b_val_sig
	.reg_a_addr_o(reg_a_addr_o_sig) ,	// output [2:0] reg_a_addr_o_sig
	.carry_yes_o(carry_yes_o_sig) ,	// output  carry_yes_o_sig
	.zero_yes_o(zero_yes_o_sig) ,	// output  zero_yes_o_sig
	.xor_comp(xor_comp_sig) ,	// output  xor_comp_sig
	.input_alu2_ctl_4_o(input_alu2_ctl_4_o_sig) ,	// output [1:0] input_alu2_ctl_4_o_sig
	.output_ctrl_4_o(output_ctrl_4_o_sig) ,	// output  output_ctrl_4_o_sig
	.output_ctrl_5_o(output_ctrl_5_o_sig) ,	// output  output_ctrl_5_o_sig
	.reg_inp_data_ctl_6_o(reg_inp_data_ctl_6_o_sig) ,	// output  reg_inp_data_ctl_6_o_sig
	.mem_rd_5_o(mem_rd_5_o_sig) ,	// output  mem_rd_5_o_sig
	.reg_wr_6_o(reg_wr_6_o_sig) ,	// output  reg_wr_6_o_sig
	.valid_out(valid_out_sig) 	// output  valid_out_sig
);

